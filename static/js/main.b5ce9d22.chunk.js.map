{"version":3,"sources":["components/home/index.js","components/header/header.js","components/footer/index.js","router.js","App.js","reportWebVitals.js","index.js"],"names":["web3","Header","props","address","handleConnectWallet","a","connectWallet","className","to","onClick","Footer","href","target","ethereum","window","ROUTERS","component","useState","setAddress","balance","setBalance","network","setNetwork","messageErr","setMessageErr","connectState","setConnectState","remainingSeconds","setRemainingSeconds","loadWeb3","useCallback","Web3","enable","eth","getAccounts","addresses","length","setAddressToLocalStorage","getETHBalance","getNetwork","currentProvider","console","log","msg","err","JSON","stringify","parse","message","getBalance","result","utils","fromWei","net","getId","then","netId","catch","localStorage","setItem","currentAddress","getItem","useEffect","setInterval","remaingTime","setTimeout","location","reload","on","accounts","removeItem","src","alt","App","basename","pathname","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5ce9d22.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { Header } from \"../header/header\";\nimport { Footer } from \"../footer/index\";\nimport \"./index.scss\";\n\nimport Web3 from \"web3\";\nlet web3;\nconst { ethereum } = window;\n\nexport const Home = (props) => {\n  const [address, setAddress] = useState(null);\n  const [balance, setBalance] = useState(0);\n  const [network, setNetwork] = useState('');\n  const [messageErr, setMessageErr] = useState(null);\n  const [connectState, setConnectState] = useState(false);\n  let [remainingSeconds, setRemainingSeconds] = useState(60);\n\n  const loadWeb3 = useCallback(async () => {\n    try {\n      if (ethereum) {\n        setConnectState(true);\n        web3 = new Web3(ethereum);\n        await ethereum.enable();\n\n        const addresses = await web3.eth.getAccounts();\n        if (addresses.length) {\n          setAddressToLocalStorage(addresses[0]);\n          setAddress(addresses[0]);\n          getETHBalance(addresses[0]);\n          getNetwork();\n          setConnectState(false);\n        }\n      } else if (window.web3) {\n        web3 = new Web3(window.web3.currentProvider);\n      }\n\n      if (web3) {\n        console.log(\"web3 =>\", web3);\n      } else {\n        const msg = (\n          <p>\n            Not connected to a Web3 Wallet. <br /> Please install MetaMask.\n          </p>\n        );\n        setConnectState(false);\n        setMessageErr(msg);\n      }\n    } catch (error) {\n      if (error) {\n        const err = JSON.stringify(error);\n        setMessageErr(\n          `${JSON.parse(err).message} Or reload page and connection again.`\n        );\n      }\n    }\n  });\n\n  const getETHBalance = (address) => {\n    web3 = new Web3(ethereum);\n    if (web3) {\n      web3.eth.getBalance(address, (err, result) => {\n        if (err) {\n          console.log(err);\n        } else {\n          const balance = web3.utils.fromWei(result, \"ether\");\n          setBalance(balance);\n        }\n      });\n    }\n  };\n\n  const getNetwork = () => {\n    web3 = new Web3(ethereum);\n    if (web3) {\n      web3.eth.net\n        .getId()\n        .then((netId) => {\n          switch (netId) {\n            case 1:\n              setNetwork(\"Mainnet\");\n              break\n            case 3:\n              setNetwork(\"Ropsten\");\n              break\n            case 4:\n              setNetwork(\"Rinkeby\");\n              break\n            case 5:\n              setNetwork(\"Goerli\");\n              break\n            case 42:\n              setNetwork(\"Kovan\");\n              break\n            default:\n              break;\n          }\n        })\n        .catch((err) => {\n          console.log(\"getNetwork\", err);\n        });\n    }\n  };\n\n  const setAddressToLocalStorage = (address) => {\n    localStorage.setItem(\"currentAddress\", address);\n  };\n\n  const handleConnectWallet = () => {\n    const currentAddress = localStorage.getItem(\"currentAddress\");\n    if (!currentAddress) {\n      loadWeb3();\n    } else if (address && address !== currentAddress) {\n      loadWeb3();\n    } else {\n      setAddress(currentAddress);\n      getETHBalance(currentAddress);\n      getNetwork(currentAddress);\n      return;\n    }\n  };\n\n  const checkConnection = () => {\n    if (connectState) {\n      if (remainingSeconds > 0) {\n        setInterval(() => {\n          let remaingTime = (remainingSeconds -= 1);\n          setRemainingSeconds(remaingTime);\n        }, 1000);\n      } else {\n        setMessageErr(\"Connect time expired. Please connect again.\");\n        setTimeout(() => {\n          window.location.reload();\n        }, 1500);\n      }\n    }\n  };\n\n  useEffect(() => {\n    checkConnection();\n    ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setAddress(accounts[0]);\n      } else {\n        localStorage.removeItem(\"currentAddress\");\n        setAddress(null);\n      }\n    });\n    handleConnectWallet();\n  });\n\n  return (\n    <>\n      <Header connectWallet={() => handleConnectWallet()} address={address} />\n      <div className=\"home-page bg-dark\">\n        <div className=\"content\">\n          <div className=\"container\">\n            <div className=\"wrap-content\">\n              <img src=\"images/metamask-fox.png\" alt=\"metamask\" />\n              {messageErr ? (\n                <div className=\"err-message text-center text-orange\">\n                  {messageErr}\n                </div>\n              ) : null}\n              {connectState && remainingSeconds > 0 && (\n                <p>{`Connecting... (${remainingSeconds}s)`}</p>\n              )}\n              <div className=\"account-info\">\n                <p>\n                  <span className=\"label\">-ETH Balance:</span>{balance} ETH\n                </p>\n                <p>\n                  <span className=\"label\">-Network:</span>\n                  {network}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./index.scss\";\n\nexport const Header = (props) => {\n  const { address } = props\n  const handleConnectWallet = async() => {\n    await props.connectWallet();\n  };\n\n  return (\n    <div className=\"header\">\n      <div className=\"wrapper\">\n        <div className=\"container\">\n          <div className=\"header-top\">\n            <Link to=\"/\" className=\"text-logo\">\n              Web3 FE\n            </Link>\n            <button\n              className=\"connect-wallet text-center truncate\"\n              onClick={() => handleConnectWallet()}\n            >\n              {address ? `Connected to ${address}` : \"Connect wallet\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import \"./index.scss\";\n\nexport const Footer = (props) => {\n  return (\n    <div className=\"footer\">\n    {/* <div className=\"footer\"> */}\n      <div className=\"wrapper\">\n        <div className=\"container\">\n          <div className=\"content\">\n            <div className=\"fo fo-left\">\n              <ul>\n                <li>\n                  <a\n                    href=\"https://etherscan.io\"\n                    target=\"_blank\"\n                  >\n                    Contract\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"https://opensea.io\"\n                    target=\"_blank\"\n                  >\n                    Opensea\n                  </a>\n                </li>\n              </ul>\n            </div>\n            <div className=\"fo fo-right\">\n              <ul>\n                <li>\n                  <a href=\"https://twitter.com\" target=\"_blank\">\n                    Twitter\n                  </a>\n                </li>\n                <li>\n                  <a href=\"https://discord.gg\" target=\"_blank\">\n                    Discord\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import {Home} from './components/home'\n\nexport const ROUTERS = \n  {\n    component: Home\n  };\n","import { BrowserRouter, Route, Switch, Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { ROUTERS } from \"./router\";\n\nimport \"./styles/index.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"app-content\">\n        <BrowserRouter basename={window.location.pathname || \"\"}>\n          <Route exact path=\"/\" component={ROUTERS.component} />\n        </BrowserRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}